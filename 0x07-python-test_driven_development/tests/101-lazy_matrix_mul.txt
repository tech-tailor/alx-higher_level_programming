=================================
How to use 101-lazy_matrix_mul.py
=================================

The function lazy_matrix_mul(m_a, m_b) multiplies 2 matrices by using
the module NumPy

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])) #doctest: +NORMALIZE_WHITESPACE
    [[ 7 10]
     [15 22]]

Documentation
=============

    >>> module_doc = __import__("101-lazy_matrix_mul").__doc__
    >>> print(len(module_doc) > 0)
    True

    >>> func_doc = __import__("101-lazy_matrix_mul").lazy_matrix_mul.__doc__
    >>> print(len(func_doc) > 0)
    True

Basic Division
==============

Normal behavior
::
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])) #doctest: +NORMALIZE_WHITESPACE
    [[ 7 10]
     [15 22]]

    >>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])) #doctest: +NORMALIZE_WHITESPACE
    [[13 16]]

    >>> print(lazy_matrix_mul([[1.5, 2.5], [3.1, 4.8]], [[1.2, 2.7], [3.3, 4.4]])) #doctest: +NORMALIZE_WHITESPACE
    [[10.05 15.05]
     [19.56 29.49]]

    >>> print(lazy_matrix_mul([[1.5, 2.5], [3.1, 4.8]], [[1, 0], [0, 1]])) #doctest: +NORMALIZE_WHITESPACE
    [[1.5 2.5]
     [3.1 4.8]]

    >>> print(lazy_matrix_mul([[1.5, 2.5], [3.1, 4.8]], [[0, 0], [0, 0]])) #doctest: +NORMALIZE_WHITESPACE
    [[0. 0.]
     [0. 0.]]

    >>> print(lazy_matrix_mul([[1.5, 2.5], [3.1, 4.8]], [[0, 1], [1, 0]])) #doctest: +NORMALIZE_WHITESPACE
    [[2.5 1.5]
     [4.8 3.1]]

    >>> print(lazy_matrix_mul([[1.5, 2.5], [3.1, 4.8]], [[float('inf'), float('inf')], [1, 0]])) #doctest: +NORMALIZE_WHITESPACE
    [[inf inf]
     [inf inf]]

    >>> print(lazy_matrix_mul([[-1, -2], [-3, -4]], [[-1, -2], [-3, -4]])) #doctest: +NORMALIZE_WHITESPACE
    [[ 7 10]
     [15 22]]

    >>> print(lazy_matrix_mul([[-1, -2], [-3, -4]], [[1, 2], [3, 4]])) #doctest: +NORMALIZE_WHITESPACE
    [[ -7 -10]
     [-15 -22]]

    >>> print(lazy_matrix_mul([[-1, 2], [3, -4]], [[1, 2], [3, 4]])) #doctest: +NORMALIZE_WHITESPACE
    [[  5   6]
     [ -9 -10]]

    >>> print(lazy_matrix_mul([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4]])) #doctest: +NORMALIZE_WHITESPACE
    [[ 7 10]
     [15 22]
     [23 34]]

Error handling
==============

Arguments must be a list
::
    >>> print(lazy_matrix_mul(1, 2)) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: ...

Empty arguments
::
    >>> print(lazy_matrix_mul([], [[]])) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: ...

    >>> print(lazy_matrix_mul([[]], []))
    [0.]

    >>> print(lazy_matrix_mul([[]], [[1, 2]])) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: ...

    >>> print(lazy_matrix_mul([[1, 2]], [[]])) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: ...

Error type argument
::
    >>> print(lazy_matrix_mul([[1, 2]], [["Hello", 3], [3, 4]])) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: ...

    >>> print(lazy_matrix_mul([[1, 2]], [[2, 3], [3, ""]])) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: ...

Matrix incorrect shape
::
    >>> print(lazy_matrix_mul([[1, 2], [3, 4, 5], [6, 7]], [[1, 2], [3, 4]])) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: ...

    >>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[5, 6, 1], [7, 8]])) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: ...

    >>> print(lazy_matrix_mul([[1, 2]], [[2, 3]])) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: ...

    >>> print(lazy_matrix_mul([[1, 2, 3]], [[1, 2], [3, 4]])) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: ...
